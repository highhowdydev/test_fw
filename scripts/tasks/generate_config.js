import 'dotenv/config';
import fs from 'node:fs';
import ora from 'ora';
import CONFIG from '../config.js';
import {writeFile} from '../lib/utils.js';

function generateConfig() {
    const spinner = ora('Generating server config...').start();

    try {
        if (fs.existsSync(CONFIG.SERVER_CFG_PATH)) fs.rmSync(CONFIG.SERVER_CFG_PATH);
        const {SERVER, RESOURCES, SERVER_TAGS, ADMINS, EXTRAS} = CONFIG;

        let cfg = `# This server configuration was generated by the Eleventh Hour framework\n`;
        cfg += `# Do not edit this file directly, it will be overwritten on next build\n\n`;

        cfg += `endpoint_add_tcp "0.0.0.0:30120"\n`;
        cfg += `endpoint_add_udp "0.0.0.0:30120"\n`;

        cfg += `\n# Server database\n`;
        cfg += `set database_url "${process.env.DATABASE_URL}"\n`;

        cfg += `\n# Server resources\n`;
        cfg += RESOURCES?.map((resource) => `ensure ${resource}\n`).join('');

        cfg += `\n# Server Auth\n`;
        cfg += `add_ace group.admin command allow\n`;
        cfg += `add_ace group.admin command.quit deny\n`;

        for (const admin of ADMINS) {
            cfg += `add_ace group.admin ${admin} allow\n`;
        }

        cfg += `\n# Server properties\n`;
        cfg += `sv_scriptHookAllowed 0\n`;
        cfg += `sv_hostname "${SERVER.NAME}"\n`;
        cfg += `sets sv_projectName "${SERVER.PROJECT_NAME}"\n`;
        cfg += `sets sv_projectDesc "${SERVER.PROJECT_DESC}"\n`;
        cfg += `sets locale "${SERVER.LOCALE}"\n`;
        cfg += `sets tags "${SERVER_TAGS.join(', ')}"\n`;
        cfg += `sv_maxclients ${SERVER.MAX_CLIENTS}\n`;
        cfg += `sv_enforceGameBuild ${SERVER.GAME_BUILD}\n`;
        cfg += `set mode "${SERVER.MODE}"\n`;

        if (EXTRAS && EXTRAS.length) {
            for (const extra of EXTRAS) {
                cfg += `${extra}\n`;
            }
        }

        cfg += `\nset steam_webApiKey "${process.env.STEAM_WEB_API_KEY}"\n`;
        cfg += `sv_licenseKey "${process.env.CFX_LICENSE_KEY}"\n`;

        writeFile(CONFIG.SERVER_CFG_PATH, cfg);

        spinner.succeed('Successfully generated server configuration');
    } catch (error) {
        console.error(error);
        spinner.fail('Failed to generate server configuration');
        process.exit(1);
    }
}

generateConfig();
